# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_kmeans_task_coordinator')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_kmeans_task_coordinator')
    _kmeans_task_coordinator = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kmeans_task_coordinator', [dirname(__file__)])
        except ImportError:
            import _kmeans_task_coordinator
            return _kmeans_task_coordinator
        try:
            _mod = imp.load_module('_kmeans_task_coordinator', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _kmeans_task_coordinator = swig_import_helper()
    del swig_import_helper
else:
    import _kmeans_task_coordinator
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class base_kmeans_coordinator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, base_kmeans_coordinator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, base_kmeans_coordinator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def get_num_changed(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_get_num_changed(self)

    def run_init(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_run_init(self)

    def random_partition_init(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_random_partition_init(self)

    def forgy_init(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_forgy_init(self)

    def run_kmeans(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_run_kmeans(self)

    def kmeanspp_init(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_kmeanspp_init(self)

    def wake4run(self, state):
        return _kmeans_task_coordinator.base_kmeans_coordinator_wake4run(self, state)

    def get_thd_data(self, row_id):
        return _kmeans_task_coordinator.base_kmeans_coordinator_get_thd_data(self, row_id)

    def set_thread_clust_idx(self, clust_idx):
        return _kmeans_task_coordinator.base_kmeans_coordinator_set_thread_clust_idx(self, clust_idx)

    def reduction_on_cuml_sum(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_reduction_on_cuml_sum(self)

    def destroy_threads(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_destroy_threads(self)

    def set_thd_dist_v_ptr(self, v):
        return _kmeans_task_coordinator.base_kmeans_coordinator_set_thd_dist_v_ptr(self, v)

    def wait4complete(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_wait4complete(self)

    def get_threads(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_get_threads(self)

    def set_global_ptrs(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_set_global_ptrs(self)

    def print_thread_data(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_print_thread_data(self)

    def build_thread_state(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_build_thread_state(self)

    def get_cluster_assignments(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_get_cluster_assignments(self)

    def clear_cluster_assignments(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_clear_cluster_assignments(self)

    def get_nrow(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_get_nrow(self)

    def get_ncol(self):
        return _kmeans_task_coordinator.base_kmeans_coordinator_get_ncol(self)
    __swig_destroy__ = _kmeans_task_coordinator.delete_base_kmeans_coordinator
    __del__ = lambda self: None
base_kmeans_coordinator_swigregister = _kmeans_task_coordinator.base_kmeans_coordinator_swigregister
base_kmeans_coordinator_swigregister(base_kmeans_coordinator)

class kmeans_task_coordinator(base_kmeans_coordinator):
    __swig_setmethods__ = {}
    for _s in [base_kmeans_coordinator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, kmeans_task_coordinator, name, value)
    __swig_getmethods__ = {}
    for _s in [base_kmeans_coordinator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, kmeans_task_coordinator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_kmeans_task_coordinator.kmeans_task_coordinator_create)
    else:
        create = _kmeans_task_coordinator.kmeans_task_coordinator_create

    def get_gcltrs(self):
        return _kmeans_task_coordinator.kmeans_task_coordinator_get_gcltrs(self)

    def get_dm(self):
        return _kmeans_task_coordinator.kmeans_task_coordinator_get_dm(self)

    def get_rid_len_tup(self, thd_id):
        return _kmeans_task_coordinator.kmeans_task_coordinator_get_rid_len_tup(self, thd_id)

    def update_clusters(self, prune_init):
        return _kmeans_task_coordinator.kmeans_task_coordinator_update_clusters(self, prune_init)

    def wake4run(self, state):
        return _kmeans_task_coordinator.kmeans_task_coordinator_wake4run(self, state)

    def destroy_threads(self):
        return _kmeans_task_coordinator.kmeans_task_coordinator_destroy_threads(self)

    def set_thread_clust_idx(self, clust_idx):
        return _kmeans_task_coordinator.kmeans_task_coordinator_set_thread_clust_idx(self, clust_idx)

    def reduction_on_cuml_sum(self):
        return _kmeans_task_coordinator.kmeans_task_coordinator_reduction_on_cuml_sum(self)

    def set_thd_dist_v_ptr(self, v):
        return _kmeans_task_coordinator.kmeans_task_coordinator_set_thd_dist_v_ptr(self, v)

    def run_init(self):
        return _kmeans_task_coordinator.kmeans_task_coordinator_run_init(self)

    def set_global_ptrs(self):
        return _kmeans_task_coordinator.kmeans_task_coordinator_set_global_ptrs(self)

    def kmeanspp_init(self):
        return _kmeans_task_coordinator.kmeans_task_coordinator_kmeanspp_init(self)

    def random_partition_init(self):
        return _kmeans_task_coordinator.kmeans_task_coordinator_random_partition_init(self)

    def forgy_init(self):
        return _kmeans_task_coordinator.kmeans_task_coordinator_forgy_init(self)

    def run_kmeans(self):
        return _kmeans_task_coordinator.kmeans_task_coordinator_run_kmeans(self)

    def get_thd_data(self, row_id):
        return _kmeans_task_coordinator.kmeans_task_coordinator_get_thd_data(self, row_id)
    __swig_destroy__ = _kmeans_task_coordinator.delete_kmeans_task_coordinator
    __del__ = lambda self: None

    def set_prune_init(self, prune_init):
        return _kmeans_task_coordinator.kmeans_task_coordinator_set_prune_init(self, prune_init)

    def print_thread_data(self):
        return _kmeans_task_coordinator.kmeans_task_coordinator_print_thread_data(self)

    def build_thread_state(self):
        return _kmeans_task_coordinator.kmeans_task_coordinator_build_thread_state(self)
kmeans_task_coordinator_swigregister = _kmeans_task_coordinator.kmeans_task_coordinator_swigregister
kmeans_task_coordinator_swigregister(kmeans_task_coordinator)

def kmeans_task_coordinator_create(*args):
    return _kmeans_task_coordinator.kmeans_task_coordinator_create(*args)
kmeans_task_coordinator_create = _kmeans_task_coordinator.kmeans_task_coordinator_create

# This file is compatible with both classic and new-style classes.


